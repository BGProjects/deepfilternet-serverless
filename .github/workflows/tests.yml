name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        
    - name: Code formatting check (black)
      run: black --check --diff src/
      
    - name: Import sorting check (isort)
      run: isort --check-only --diff src/
      
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=15 --max-line-length=100 --statistics

  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsndfile1 libsndfile1-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python  
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsndfile1 libsndfile1-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install onnxruntime  # CPU version for CI
    
    - name: Test model loading
      run: |
        python -c "
        import sys
        sys.path.append('src')
        
        from audio_processor import DeepFilterNetProcessor
        from utils import setup_logging
        
        setup_logging()
        
        try:
            processor = DeepFilterNetProcessor('models/normal', use_gpu=False)
            print('✓ Model loaded successfully')
        except Exception as e:
            print(f'✗ Model loading failed: {e}')
            sys.exit(1)
        "
    
    - name: Test audio processing pipeline
      run: |
        python -c "
        import sys
        import numpy as np
        import soundfile as sf
        import tempfile
        
        sys.path.append('src')
        from audio_processor import DeepFilterNetProcessor
        from utils import setup_logging
        
        setup_logging()
        
        # Create test audio
        duration = 2.0
        sample_rate = 48000
        t = np.linspace(0, duration, int(duration * sample_rate))
        audio = 0.5 * np.sin(2 * np.pi * 440 * t) + 0.1 * np.random.normal(size=len(t))
        
        # Save test audio
        with tempfile.NamedTemporaryFile(suffix='.wav') as tmp:
            sf.write(tmp.name, audio, sample_rate)
            
            try:
                processor = DeepFilterNetProcessor('models/normal', use_gpu=False)
                enhanced, metadata = processor.enhance_audio_file(tmp.name)
                
                print(f'✓ Audio processed successfully')
                print(f'  RTF: {metadata[\"rtf\"]:.3f}')
                print(f'  LSNR: {metadata[\"lsnr_db\"]:.1f} dB')
                
                assert len(enhanced) > 0, 'Enhanced audio is empty'
                assert metadata['rtf'] > 0, 'Invalid RTF'
                
            except Exception as e:
                print(f'✗ Audio processing failed: {e}')
                import traceback
                traceback.print_exc()
                sys.exit(1)
        "

  benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsndfile1 libsndfile1-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install onnxruntime
    
    - name: Run benchmark
      run: |
        python scripts/benchmark.py --model_path models/normal --output benchmark_results.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.json